
%checking if input is a list or not
delete(X,_,_):- not(is_list(X)), write('First input wrong.. list expected..'),fail.
delete(_,X,_):- not(is_list(X)), write('Second input wrong.. , list expected..'),fail.

%checks if a variable, atom or term is in the list or not
check(A0, [A1|_]) :- 
    A0 == A1, !.
check(A0, [_|R]) :- 
    check(A0, R).

%base case
delete([], _, []) :- !.

% recursively performing the delete function
delete([Head|List_1], List_2, List_3) :-
    check(Head, List_2), !,
    delete(List_1, List_2, List_3).

delete([Head|List_2], List_1, [Head|List_3]) :-
    delete(List_2, List_1, List_3).